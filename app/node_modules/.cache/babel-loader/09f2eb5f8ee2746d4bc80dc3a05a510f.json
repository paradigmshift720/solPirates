{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\parad\\\\documents\\\\nft\\\\nft-drop-starter-project\\\\app\\\\src\\\\CandyMachine\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport { programs } from '@metaplex/js';\nimport './CandyMachine.css';\nimport { candyMachineProgram, TOKEN_METADATA_PROGRAM_ID, SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID } from './helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  metadata: {\n    Metadata,\n    MetadataProgram\n  }\n} = programs;\nconst config = new web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_CONFIG);\nconst {\n  SystemProgram\n} = web3;\nconst opts = {\n  preflightCommitment: 'processed'\n};\nconst MAX_NAME_LENGTH = 32;\nconst MAX_URI_LENGTH = 200;\nconst MAX_SYMBOL_LENGTH = 10;\nconst MAX_CREATOR_LEN = 32 + 1 + 1;\n\nconst CandyMachine = _ref => {\n  _s();\n\n  let {\n    walletAddress\n  } = _ref;\n  // Actions\n  useEffect(() => {\n    getCandyMachineState();\n  }, []);\n\n  const getProvider = () => {\n    const rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST; // Create a new connection object\n\n    const connection = new Connection(rpcHost); // Create a new Solana provider object\n\n    const provider = new Provider(connection, window.solana, opts.preflightCommitment);\n    return provider;\n  }; // Declare getCandyMachineState as an async method\n\n\n  const getCandyMachineState = async () => {\n    const provider = getProvider(); // Get metadata about your deployed candy machine program\n\n    const idl = await Program.fetchIdl(candyMachineProgram, provider); // Create a program that you can call\n\n    const program = new Program(idl, candyMachineProgram, provider); // Fetch the metadata from your candy machine\n\n    const candyMachine = await program.account.candyMachine.fetch(process.env.REACT_APP_CANDY_MACHINE_ID); // Parse out all our metadata and log it out\n\n    const itemsAvailable = candyMachine.data.itemsAvailable.toNumber();\n    const itemsRedeemed = candyMachine.itemsRedeemed.toNumber();\n    const itemsRemaining = itemsAvailable - itemsRedeemed;\n    const goLiveData = candyMachine.data.goLiveDate.toNumber(); // We will be using this later in our UI so let's generate this now\n\n    const goLiveDateTimeString = `${new Date(goLiveData * 1000).toLocaleDateString()} @ ${new Date(goLiveData * 1000).toLocaleTimeString()}`;\n    console.log({\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      goLiveData,\n      goLiveDateTimeString\n    });\n  };\n\n  const fetchHashTable = async (hash, metadataEnabled) => {\n    const connection = new web3.Connection(process.env.REACT_APP_SOLANA_RPC_HOST);\n    const metadataAccounts = await MetadataProgram.getProgramAccounts(connection, {\n      filters: [{\n        memcmp: {\n          offset: 1 + 32 + 32 + 4 + MAX_NAME_LENGTH + 4 + MAX_URI_LENGTH + 4 + MAX_SYMBOL_LENGTH + 2 + 1 + 4 + 0 * MAX_CREATOR_LEN,\n          bytes: hash\n        }\n      }]\n    });\n    const mintHashes = [];\n\n    for (let index = 0; index < metadataAccounts.length; index++) {\n      const account = metadataAccounts[index];\n      const accountInfo = await connection.getParsedAccountInfo(account.pubkey);\n      const metadata = new Metadata(hash.toString(), accountInfo.value);\n      if (metadataEnabled) mintHashes.push(metadata.data);else mintHashes.push(metadata.data.mint);\n    }\n\n    return mintHashes;\n  };\n\n  const getMetadata = async mint => {\n    return (await PublicKey.findProgramAddress([Buffer.from('metadata'), TOKEN_METADATA_PROGRAM_ID.toBuffer(), mint.toBuffer()], TOKEN_METADATA_PROGRAM_ID))[0];\n  };\n\n  const getMasterEdition = async mint => {\n    return (await PublicKey.findProgramAddress([Buffer.from('metadata'), TOKEN_METADATA_PROGRAM_ID.toBuffer(), mint.toBuffer(), Buffer.from('edition')], TOKEN_METADATA_PROGRAM_ID))[0];\n  };\n\n  const getTokenWallet = async (wallet, mint) => {\n    return (await web3.PublicKey.findProgramAddress([wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()], SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID))[0];\n  };\n\n  const mintToken = async () => {\n    try {\n      const mint = web3.Keypair.generate();\n      const token = await getTokenWallet(walletAddress.publicKey, mint.publicKey);\n      const metadata = await getMetadata(mint.publicKey);\n      const masterEdition = await getMasterEdition(mint.publicKey);\n      const rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST;\n      const connection = new Connection(rpcHost);\n      const rent = await connection.getMinimumBalanceForRentExemption(MintLayout.span);\n      const accounts = {\n        config,\n        candyMachine: process.env.REACT_APP_CANDY_MACHINE_ID,\n        payer: walletAddress.publicKey,\n        wallet: process.env.REACT_APP_TREASURY_ADDRESS,\n        mint: mint.publicKey,\n        metadata,\n        masterEdition,\n        mintAuthority: walletAddress.publicKey,\n        updateAuthority: walletAddress.publicKey,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: web3.SYSVAR_RENT_PUBKEY,\n        clock: web3.SYSVAR_CLOCK_PUBKEY\n      };\n      const signers = [mint];\n      const instructions = [web3.SystemProgram.createAccount({\n        fromPubkey: walletAddress.publicKey,\n        newAccountPubkey: mint.publicKey,\n        space: MintLayout.span,\n        lamports: rent,\n        programId: TOKEN_PROGRAM_ID\n      }), Token.createInitMintInstruction(TOKEN_PROGRAM_ID, mint.publicKey, 0, walletAddress.publicKey, walletAddress.publicKey), createAssociatedTokenAccountInstruction(token, walletAddress.publicKey, walletAddress.publicKey, mint.publicKey), Token.createMintToInstruction(TOKEN_PROGRAM_ID, mint.publicKey, token, walletAddress.publicKey, [], 1)];\n      const provider = getProvider();\n      const idl = await Program.fetchIdl(candyMachineProgram, provider);\n      const program = new Program(idl, candyMachineProgram, provider);\n      const txn = await program.rpc.mintNft({\n        accounts,\n        signers,\n        instructions\n      });\n      console.log('txn:', txn); // Setup listener\n\n      connection.onSignatureWithOptions(txn, async (notification, context) => {\n        if (notification.type === 'status') {\n          console.log('Receievd status event');\n          const {\n            result\n          } = notification;\n\n          if (!result.err) {\n            console.log('NFT Minted!');\n          }\n        }\n      }, {\n        commitment: 'processed'\n      });\n    } catch (error) {\n      let message = error.msg || 'Minting failed! Please try again!';\n\n      if (!error.msg) {\n        if (error.message.indexOf('0x138')) {} else if (error.message.indexOf('0x137')) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf('0x135')) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      console.warn(message);\n    }\n  };\n\n  const createAssociatedTokenAccountInstruction = (associatedTokenAddress, payer, walletAddress, splTokenMintAddress) => {\n    const keys = [{\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n    return new web3.TransactionInstruction({\n      keys,\n      programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n      data: Buffer.from([])\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"machine-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Drop Date:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Items Minted:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"cta-button mint-button\",\n      onClick: mintToken,\n      children: \"Mint NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 311,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CandyMachine, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = CandyMachine;\nexport default CandyMachine;\n\nvar _c;\n\n$RefreshReg$(_c, \"CandyMachine\");","map":{"version":3,"sources":["C:/Users/parad/documents/nft/nft-drop-starter-project/app/src/CandyMachine/index.js"],"names":["React","useEffect","Connection","PublicKey","Program","Provider","web3","MintLayout","TOKEN_PROGRAM_ID","Token","programs","candyMachineProgram","TOKEN_METADATA_PROGRAM_ID","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","metadata","Metadata","MetadataProgram","config","process","env","REACT_APP_CANDY_MACHINE_CONFIG","SystemProgram","opts","preflightCommitment","MAX_NAME_LENGTH","MAX_URI_LENGTH","MAX_SYMBOL_LENGTH","MAX_CREATOR_LEN","CandyMachine","walletAddress","getCandyMachineState","getProvider","rpcHost","REACT_APP_SOLANA_RPC_HOST","connection","provider","window","solana","idl","fetchIdl","program","candyMachine","account","fetch","REACT_APP_CANDY_MACHINE_ID","itemsAvailable","data","toNumber","itemsRedeemed","itemsRemaining","goLiveData","goLiveDate","goLiveDateTimeString","Date","toLocaleDateString","toLocaleTimeString","console","log","fetchHashTable","hash","metadataEnabled","metadataAccounts","getProgramAccounts","filters","memcmp","offset","bytes","mintHashes","index","length","accountInfo","getParsedAccountInfo","pubkey","toString","value","push","mint","getMetadata","findProgramAddress","Buffer","from","toBuffer","getMasterEdition","getTokenWallet","wallet","mintToken","Keypair","generate","token","publicKey","masterEdition","rent","getMinimumBalanceForRentExemption","span","accounts","payer","REACT_APP_TREASURY_ADDRESS","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","programId","SYSVAR_RENT_PUBKEY","clock","SYSVAR_CLOCK_PUBKEY","signers","instructions","createAccount","fromPubkey","newAccountPubkey","space","lamports","createInitMintInstruction","createAssociatedTokenAccountInstruction","createMintToInstruction","txn","rpc","mintNft","onSignatureWithOptions","notification","context","type","result","err","commitment","error","message","msg","indexOf","code","warn","associatedTokenAddress","splTokenMintAddress","keys","isSigner","isWritable","TransactionInstruction"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { Connection, PublicKey } from '@solana/web3.js';\r\nimport { Program, Provider, web3 } from '@project-serum/anchor';\r\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\r\nimport { programs } from '@metaplex/js';\r\nimport './CandyMachine.css';\r\nimport {\r\n  candyMachineProgram,\r\n  TOKEN_METADATA_PROGRAM_ID,\r\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n} from './helpers';\r\nconst {\r\n  metadata: { Metadata, MetadataProgram },\r\n} = programs;\r\n\r\nconst config = new web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_CONFIG);\r\nconst { SystemProgram } = web3;\r\nconst opts = {\r\n  preflightCommitment: 'processed',\r\n};\r\n\r\nconst MAX_NAME_LENGTH = 32;\r\nconst MAX_URI_LENGTH = 200;\r\nconst MAX_SYMBOL_LENGTH = 10;\r\nconst MAX_CREATOR_LEN = 32 + 1 + 1;\r\n\r\nconst CandyMachine = ({ walletAddress }) => {\r\n  // Actions\r\n  useEffect(() => {\r\n    getCandyMachineState();\r\n  }, []);\r\n\r\n  const getProvider = () => {\r\n    const rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST;\r\n    // Create a new connection object\r\n    const connection = new Connection(rpcHost);\r\n    \r\n    // Create a new Solana provider object\r\n    const provider = new Provider(\r\n      connection,\r\n      window.solana,\r\n      opts.preflightCommitment\r\n    );\r\n  \r\n    return provider;\r\n  };  \r\n\r\n  // Declare getCandyMachineState as an async method\r\nconst getCandyMachineState = async () => { \r\n  const provider = getProvider();\r\n  \r\n  \r\n  // Get metadata about your deployed candy machine program\r\n  const idl = await Program.fetchIdl(candyMachineProgram, provider);\r\n\r\n  // Create a program that you can call\r\n  const program = new Program(idl, candyMachineProgram, provider);\r\n\r\n  // Fetch the metadata from your candy machine\r\n  const candyMachine = await program.account.candyMachine.fetch(\r\n    process.env.REACT_APP_CANDY_MACHINE_ID\r\n  );\r\n  \r\n  // Parse out all our metadata and log it out\r\n  const itemsAvailable = candyMachine.data.itemsAvailable.toNumber();\r\n  const itemsRedeemed = candyMachine.itemsRedeemed.toNumber();\r\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\r\n  const goLiveData = candyMachine.data.goLiveDate.toNumber();\r\n\r\n  // We will be using this later in our UI so let's generate this now\r\n  const goLiveDateTimeString = `${new Date(\r\n    goLiveData * 1000\r\n  ).toLocaleDateString()} @ ${new Date(\r\n    goLiveData * 1000\r\n  ).toLocaleTimeString()}`;\r\n\r\n  console.log({\r\n    itemsAvailable,\r\n    itemsRedeemed,\r\n    itemsRemaining,\r\n    goLiveData,\r\n    goLiveDateTimeString,\r\n  });\r\n};\r\n\r\n  const fetchHashTable = async (hash, metadataEnabled) => {\r\n    const connection = new web3.Connection(\r\n      process.env.REACT_APP_SOLANA_RPC_HOST\r\n    );\r\n\r\n    const metadataAccounts = await MetadataProgram.getProgramAccounts(\r\n      connection,\r\n      {\r\n        filters: [\r\n          {\r\n            memcmp: {\r\n              offset:\r\n                1 +\r\n                32 +\r\n                32 +\r\n                4 +\r\n                MAX_NAME_LENGTH +\r\n                4 +\r\n                MAX_URI_LENGTH +\r\n                4 +\r\n                MAX_SYMBOL_LENGTH +\r\n                2 +\r\n                1 +\r\n                4 +\r\n                0 * MAX_CREATOR_LEN,\r\n              bytes: hash,\r\n            },\r\n          },\r\n        ],\r\n      }\r\n    );\r\n\r\n    const mintHashes = [];\r\n\r\n    for (let index = 0; index < metadataAccounts.length; index++) {\r\n      const account = metadataAccounts[index];\r\n      const accountInfo = await connection.getParsedAccountInfo(account.pubkey);\r\n      const metadata = new Metadata(hash.toString(), accountInfo.value);\r\n      if (metadataEnabled) mintHashes.push(metadata.data);\r\n      else mintHashes.push(metadata.data.mint);\r\n    }\r\n\r\n    return mintHashes;\r\n  };\r\n\r\n  const getMetadata = async (mint) => {\r\n    return (\r\n      await PublicKey.findProgramAddress(\r\n        [\r\n          Buffer.from('metadata'),\r\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n          mint.toBuffer(),\r\n        ],\r\n        TOKEN_METADATA_PROGRAM_ID\r\n      )\r\n    )[0];\r\n  };\r\n\r\n  const getMasterEdition = async (mint) => {\r\n    return (\r\n      await PublicKey.findProgramAddress(\r\n        [\r\n          Buffer.from('metadata'),\r\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n          mint.toBuffer(),\r\n          Buffer.from('edition'),\r\n        ],\r\n        TOKEN_METADATA_PROGRAM_ID\r\n      )\r\n    )[0];\r\n  };\r\n\r\n  const getTokenWallet = async (wallet, mint) => {\r\n    return (\r\n      await web3.PublicKey.findProgramAddress(\r\n        [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n        SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\r\n      )\r\n    )[0];\r\n  };\r\n\r\n  const mintToken = async () => {\r\n    try {\r\n      const mint = web3.Keypair.generate();\r\n      const token = await getTokenWallet(\r\n        walletAddress.publicKey,\r\n        mint.publicKey\r\n      );\r\n      const metadata = await getMetadata(mint.publicKey);\r\n      const masterEdition = await getMasterEdition(mint.publicKey);\r\n      const rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST;\r\n      const connection = new Connection(rpcHost);\r\n      const rent = await connection.getMinimumBalanceForRentExemption(\r\n        MintLayout.span\r\n      );\r\n\r\n      const accounts = {\r\n        config,\r\n        candyMachine: process.env.REACT_APP_CANDY_MACHINE_ID,\r\n        payer: walletAddress.publicKey,\r\n        wallet: process.env.REACT_APP_TREASURY_ADDRESS,\r\n        mint: mint.publicKey,\r\n        metadata,\r\n        masterEdition,\r\n        mintAuthority: walletAddress.publicKey,\r\n        updateAuthority: walletAddress.publicKey,\r\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n        tokenProgram: TOKEN_PROGRAM_ID,\r\n        systemProgram: SystemProgram.programId,\r\n        rent: web3.SYSVAR_RENT_PUBKEY,\r\n        clock: web3.SYSVAR_CLOCK_PUBKEY,\r\n      };\r\n\r\n      const signers = [mint];\r\n      const instructions = [\r\n        web3.SystemProgram.createAccount({\r\n          fromPubkey: walletAddress.publicKey,\r\n          newAccountPubkey: mint.publicKey,\r\n          space: MintLayout.span,\r\n          lamports: rent,\r\n          programId: TOKEN_PROGRAM_ID,\r\n        }),\r\n        Token.createInitMintInstruction(\r\n          TOKEN_PROGRAM_ID,\r\n          mint.publicKey,\r\n          0,\r\n          walletAddress.publicKey,\r\n          walletAddress.publicKey\r\n        ),\r\n        createAssociatedTokenAccountInstruction(\r\n          token,\r\n          walletAddress.publicKey,\r\n          walletAddress.publicKey,\r\n          mint.publicKey\r\n        ),\r\n        Token.createMintToInstruction(\r\n          TOKEN_PROGRAM_ID,\r\n          mint.publicKey,\r\n          token,\r\n          walletAddress.publicKey,\r\n          [],\r\n          1\r\n        ),\r\n      ];\r\n\r\n      const provider = getProvider();\r\n      const idl = await Program.fetchIdl(candyMachineProgram, provider);\r\n      const program = new Program(idl, candyMachineProgram, provider);\r\n\r\n      const txn = await program.rpc.mintNft({\r\n        accounts,\r\n        signers,\r\n        instructions,\r\n      });\r\n\r\n      console.log('txn:', txn);\r\n\r\n      // Setup listener\r\n      connection.onSignatureWithOptions(\r\n        txn,\r\n        async (notification, context) => {\r\n          if (notification.type === 'status') {\r\n            console.log('Receievd status event');\r\n\r\n            const { result } = notification;\r\n            if (!result.err) {\r\n              console.log('NFT Minted!');\r\n            }\r\n          }\r\n        },\r\n        { commitment: 'processed' }\r\n      );\r\n    } catch (error) {\r\n      let message = error.msg || 'Minting failed! Please try again!';\r\n\r\n      if (!error.msg) {\r\n        if (error.message.indexOf('0x138')) {\r\n        } else if (error.message.indexOf('0x137')) {\r\n          message = `SOLD OUT!`;\r\n        } else if (error.message.indexOf('0x135')) {\r\n          message = `Insufficient funds to mint. Please fund your wallet.`;\r\n        }\r\n      } else {\r\n        if (error.code === 311) {\r\n          message = `SOLD OUT!`;\r\n        } else if (error.code === 312) {\r\n          message = `Minting period hasn't started yet.`;\r\n        }\r\n      }\r\n\r\n      console.warn(message);\r\n    }\r\n  };\r\n\r\n  const createAssociatedTokenAccountInstruction = (\r\n    associatedTokenAddress,\r\n    payer,\r\n    walletAddress,\r\n    splTokenMintAddress\r\n  ) => {\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\r\n      { pubkey: walletAddress, isSigner: false, isWritable: false },\r\n      { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\r\n      {\r\n        pubkey: web3.SystemProgram.programId,\r\n        isSigner: false,\r\n        isWritable: false,\r\n      },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      {\r\n        pubkey: web3.SYSVAR_RENT_PUBKEY,\r\n        isSigner: false,\r\n        isWritable: false,\r\n      },\r\n    ];\r\n    return new web3.TransactionInstruction({\r\n      keys,\r\n      programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n      data: Buffer.from([]),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"machine-container\">\r\n      <p>Drop Date:</p>\r\n      <p>Items Minted:</p>\r\n      <button className=\"cta-button mint-button\" onClick={mintToken}>\r\n        Mint NFT\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CandyMachine;\r\n"]},"metadata":{},"sourceType":"module"}